const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
  } = require("@google/generative-ai");
  
  const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
  const genAI = new GoogleGenerativeAI(apiKey);
  
  const model = genAI.getGenerativeModel({
    model: "gemini-2.0-flash-exp",
  });
  
  const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "text/plain",
  };
  
  const CodeGenerationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "application/json",
  };
  
    export const chatSession = model.startChat({
      generationConfig,
      history: [
      ],
    });
  
    export const GenAiCode =model.startChat({
        generationConfig:CodeGenerationConfig,
        history: [
            {
              role: "user",
              parts: [
                {text: "generate todo app :\nGenerate a Project in React. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, \nwithout any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\nalso you can use date-fns for date format and react-chartjs-2 chart, graph library\n\nReturn the response in JSON format with the following schema:\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\n\nHere‚Äôs the reformatted and improved version of your prompt:\n\nGenerate a programming code structure for a React project using Vite. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, without any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\n\nReturn the response in JSON format with the following schema:\n\njson\nCopy code\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\nEnsure the files field contains all created files, and the generatedFiles field lists all the filenames. Each file's code should be included in the code field, following this example:\nfiles:{\n  \"/App.js\": {\n    \"code\": \"import React from 'react';\\nimport './styles.css';\\nexport default function App() {\\n  return (\\n    <div className='p-4 bg-gray-100 text-center'>\\n      <h1 className='text-2xl font-bold text-blue-500'>Hello, Tailwind CSS with Sandpack!</h1>\\n      <p className='mt-2 text-gray-700'>This is a live code editor.</p>\\n    </div>\\n  );\\n}\"\n  }\n}\n  Additionally, include an explanation of the project's structure, purpose, and functionality in the explanation field. Make the response concise and clear in one paragraph.\n  - When asked then only use this package to import, here are some packages available to import and use (date-fns,react-chartjs-2,\"firebase\",\"@google/generative-ai\" ) only when it required\n  \n  - For placeholder images, please use a https://archive.org/download/placeholder-image/placeholder-image.jpg\n  -Add Emoji icons whenever needed to give good user experinence\n  - all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.\n\n- By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.\n\n- Use icons from lucide-react for logos.\n\n- Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags.\n   `,\n\n"},
              ],
            },
            {
              role: "model",
              parts: [
                {text: "```json\n{\n  \"projectTitle\": \"Todo App\",\n  \"explanation\": \"This React-based Todo App allows users to manage their tasks efficiently. It uses Tailwind CSS for styling, lucide-react for icons, and the date-fns library for date formatting. The app includes features such as adding tasks, marking them as complete, editing tasks, deleting tasks, and filtering tasks based on their completion status. The components are organized in separate folders for better maintainability. The UI is designed to be user-friendly and visually appealing, with a focus on clear presentation and ease of use, enhanced with emojis.\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"import React, { useState, useEffect } from 'react';\\nimport TaskList from './components/TaskList';\\nimport TaskForm from './components/TaskForm';\\nimport FilterOptions from './components/FilterOptions';\\nimport { v4 as uuidv4 } from 'uuid';\\n\\nfunction App() {\\n  const [tasks, setTasks] = useState(() => {\\n    const savedTasks = localStorage.getItem('tasks');\\n    return savedTasks ? JSON.parse(savedTasks) : [];\\n  });\\n  const [filter, setFilter] = useState('all');\\n\\n  useEffect(() => {\\n    localStorage.setItem('tasks', JSON.stringify(tasks));\\n  }, [tasks]);\\n\\n  const addTask = (newTask) => {\\n    const taskWithId = { ...newTask, id: uuidv4() };\\n    setTasks([...tasks, taskWithId]);\\n  };\\n\\n  const toggleComplete = (id) => {\\n    setTasks(tasks.map(task => task.id === id ? { ...task, completed: !task.completed } : task));\\n  };\\n\\n   const editTask = (id, updatedTask) => {\\n    setTasks(tasks.map(task => task.id === id ? { ...task, ...updatedTask } : task));\\n  };\\n\\n  const deleteTask = (id) => {\\n    setTasks(tasks.filter(task => task.id !== id));\\n  };\\n\\n  const filteredTasks = () => {\\n      switch (filter) {\\n          case 'completed':\\n              return tasks.filter(task => task.completed);\\n          case 'incomplete':\\n              return tasks.filter(task => !task.completed);\\n          default:\\n              return tasks;\\n      }\\n  };\\n\\n  return (\\n    <div className=\\\"min-h-screen bg-gray-100 py-6 flex flex-col justify-center sm:py-12\\\">\\n      <div className=\\\"relative py-3 sm:max-w-xl sm:mx-auto\\\">\\n        <div className=\\\"absolute inset-0 bg-gradient-to-r from-blue-300 to-blue-600 shadow-lg transform -skew-y-6 sm:skew-y-0 sm:-rotate-6 sm:rounded-3xl\\\"></div>\\n        <div className=\\\"relative px-4 py-10 bg-white shadow-lg sm:rounded-3xl sm:p-20\\\">\\n            <div className=\\\"max-w-md mx-auto\\\">\\n                <div className='text-center'>\\n                   <h1 className=\\\"text-2xl font-semibold text-gray-700 mb-4 flex items-center justify-center\\\"> <span role=\\\"img\\\" aria-label=\\\"list\\\">üìù</span> My Todo List</h1>\\n                   <TaskForm onAddTask={addTask} />\\n                   <FilterOptions filter={filter} onFilterChange={setFilter} />\\n                </div>\\n               <TaskList\\n                tasks={filteredTasks()}\\n                onToggleComplete={toggleComplete}\\n                onDeleteTask={deleteTask}\\n                onEditTask={editTask}\\n                />\\n            </div>\\n         </div>\\n       </div>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n\"\n    },\n     \"/components/TaskForm.js\": {\n      \"code\": \"import React, { useState } from 'react';\\nimport { Plus } from 'lucide-react';\\n\\nfunction TaskForm({ onAddTask }) {\\n    const [taskText, setTaskText] = useState('');\\n    const [dueDate, setDueDate] = useState('');\\n\\n    const handleSubmit = (e) => {\\n        e.preventDefault();\\n        if (taskText.trim()) {\\n           onAddTask({ text: taskText, completed: false, dueDate: dueDate });\\n            setTaskText('');\\n            setDueDate('');\\n        }\\n    };\\n\\n    return (\\n        <form onSubmit={handleSubmit} className=\\\"mb-6 flex space-x-2\\\">\\n           <input\\n                type=\\\"text\\\"\\n                placeholder=\\\"Add a task...\\\"\\n                value={taskText}\\n                onChange={(e) => setTaskText(e.target.value)}\\n                className=\\\"flex-1 px-4 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500\\\"\\n            />\\n            <input\\n                type=\\\"date\\\"\\n                value={dueDate}\\n                onChange={(e) => setDueDate(e.target.value)}\\n                className=\\\"px-4 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500\\\"\\n            />\\n            <button type=\\\"submit\\\" className=\\\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500\\\">\\n              <Plus className=\\\"h-5 w-5\\\" />\\n             </button>\\n        </form>\\n    );\\n}\\n\\nexport default TaskForm;\\n\"\n    },\n    \"/components/TaskList.js\": {\n      \"code\": \"import React from 'react';\\nimport Task from './Task';\\n\\nfunction TaskList({ tasks, onToggleComplete, onDeleteTask, onEditTask }) {\\n    return (\\n        <ul className=\\\"space-y-4\\\">\\n            {tasks.length === 0 ? (\\n                <li className=\\\"text-gray-500 italic text-center\\\">No tasks yet. Add some! üéâ</li>\\n            ) : (\\n                tasks.map(task => (\\n                    <Task\\n                        key={task.id}\\n                        task={task}\\n                        onToggleComplete={onToggleComplete}\\n                        onDeleteTask={onDeleteTask}\\n                        onEditTask={onEditTask}\\n                    />\\n                ))\\n            )}\\n        </ul>\\n    );\\n}\\n\\nexport default TaskList;\\n\"\n    },\n     \"/components/Task.js\": {\n      \"code\": \"import React, { useState } from 'react';\\nimport { Trash, Edit, Check, X } from 'lucide-react';\\nimport { format } from 'date-fns';\\n\\nfunction Task({ task, onToggleComplete, onDeleteTask, onEditTask }) {\\n    const [isEditing, setIsEditing] = useState(false);\\n    const [editedText, setEditedText] = useState(task.text);\\n    const [editedDueDate, setEditedDueDate] = useState(task.dueDate || '');\\n\\n    const handleEdit = () => {\\n      setIsEditing(true);\\n    };\\n\\n    const handleSave = () => {\\n      onEditTask(task.id, { text: editedText, dueDate: editedDueDate });\\n      setIsEditing(false);\\n    };\\n\\n     const handleCancelEdit = () => {\\n      setIsEditing(false);\\n       setEditedText(task.text);\\n       setEditedDueDate(task.dueDate || '');\\n    };\\n\\n  const formatDate = (dateString) => {\\n     if (!dateString) return '';\\n     try {\\n        const date = new Date(dateString);\\n        return format(date, 'MMM dd, yyyy');\\n      } catch (error) {\\n         console.error(\\\"Error formatting date:\\\", error);\\n        return 'Invalid Date';\\n     }\\n  };\\n\\n\\n    return (\\n        <li className=\\\"bg-white p-4 rounded shadow flex items-center justify-between\\\">\\n           <div className='flex flex-col'>\\n            {isEditing ? (\\n                 <input\\n                   type=\\\"text\\\"\\n                   value={editedText}\\n                  onChange={(e) => setEditedText(e.target.value)}\\n                  className=\\\"border rounded px-2 py-1 focus:outline-none focus:ring-2 focus:ring-blue-500\\\"/>\\n             ) : (\\n                <span className={`${task.completed ? 'line-through text-gray-500' : 'text-gray-700'}`}>\\n                    {task.text}\\n               </span>\\n             )}\\n             {\\n                isEditing ? (\\n                  <input\\n                    type=\\\"date\\\"\\n                    value={editedDueDate}\\n                    onChange={(e) => setEditedDueDate(e.target.value)}\\n                   className=\\\"border rounded px-2 py-1 focus:outline-none focus:ring-2 focus:ring-blue-500\\\"\\n                  />\\n               ) : (\\n                 task.dueDate && <p className=\\\"text-sm text-gray-500\\\">Due: {formatDate(task.dueDate)}</p>\\n                 )\\n              }\\n           </div>\\n            <div>\\n                {isEditing ? (\\n                <div className='flex space-x-2'>\\n                    <button onClick={handleSave} className='text-green-500 hover:text-green-700 focus:outline-none'>\\n                       <Check className=\\\"h-4 w-4\\\" />\\n                    </button>\\n                   <button onClick={handleCancelEdit} className='text-gray-500 hover:text-gray-700 focus:outline-none'>\\n                       <X className=\\\"h-4 w-4\\\" />\\n                   </button>\\n              </div>\\n                ) : (\\n                <div className=\\\"flex space-x-2\\\">\\n                    <button onClick={() => onToggleComplete(task.id)} className={`text-gray-500 hover:text-gray-700 focus:outline-none ${task.completed ? 'text-green-500' : ''}`}>\\n                        <Check className=\\\"h-4 w-4\\\" />\\n                    </button>\\n                    <button onClick={handleEdit} className='text-blue-500 hover:text-blue-700 focus:outline-none'>\\n                        <Edit className=\\\"h-4 w-4\\\" />\\n                    </button>\\n                    <button onClick={() => onDeleteTask(task.id)} className=\\\"text-red-500 hover:text-red-700 focus:outline-none\\\">\\n                        <Trash className=\\\"h-4 w-4\\\" />\\n                    </button>\\n              </div>\\n                )}\\n            </div>\\n        </li>\\n    );\\n}\\n\\nexport default Task;\\n\"\n    },\n    \"/components/FilterOptions.js\": {\n      \"code\": \"import React from 'react';\\n\\nfunction FilterOptions({ filter, onFilterChange }) {\\n    return (\\n        <div className=\\\"flex justify-center space-x-4 mb-4\\\">\\n            <button\\n                className={`px-3 py-1 rounded ${filter === 'all' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`}\\n                onClick={() => onFilterChange('all')}\\n            >\\n                All\\n            </button>\\n            <button\\n                className={`px-3 py-1 rounded ${filter === 'completed' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`}\\n                onClick={() => onFilterChange('completed')}\\n            >\\n                Completed\\n            </button>\\n            <button\\n                className={`px-3 py-1 rounded ${filter === 'incomplete' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`}\\n                onClick={() => onFilterChange('incomplete')}\\n            >\\n                Incomplete\\n            </button>\\n        </div>\\n    );\\n}\\n\\nexport default FilterOptions;\\n\"\n    }\n  },\n    \"generatedFiles\": [\n      \"/App.js\",\n      \"/components/TaskForm.js\",\n      \"/components/TaskList.js\",\n      \"/components/Task.js\",\n       \"/components/FilterOptions.js\"\n    ]\n}\n```\n"},
              ],
            },
          ],
        })
        
        //const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
    // console.log(result.response.text());
  